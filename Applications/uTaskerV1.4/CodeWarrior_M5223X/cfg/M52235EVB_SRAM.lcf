#  NOTE: The debugger uses the Illegal Instruction Vector to stop.
#  A small subroutine is written at the location VBR+0x408-VBR+0x40B
#  to handle the exception.  The Illegal Instruction Vector in
#  the the vector table at VBR+0x10 is then pointed to it.  When the
#  debugger encounters an illegal instruction, it jumps to this 
#  subroutine, which ends with an RTE, then exits.
#  Do not overwrite this area of memory otherwise the debugger may not 
#  exit properly.

#/* 12.06.2007 Adapted to allow malloc heap is be configured */
#/* 17.11.2007 Correct SRAM configuration */

MEMORY {
	vector_ram (RWX) : ORIGIN = 0x20000000, LENGTH = 0x00000400
	user       (RWX) : ORIGIN = 0x20000500, LENGTH = 0x00007C00
	ipsbar     (RWX) : ORIGIN = 0x40000000, LENGTH = 0x0
}

SECTIONS {
	.ipsbar		: {} > ipsbar

	.vectors :
	{
		. = ALIGN (0x4);
	} > vector_ram

	.text :
	{
		*(.text)
		.= ALIGN(0x10);
		*(.rodata)		
		.= ALIGN(0x10);
	} > user

    .data : 
	{
		___DATA_ROM = .;
		___DATA_RAM = .;
	
		*(.exception)	
		.                         = ALIGN(0x4);	
		__exception_table_start__ = .;
		EXCEPTION
		__exception_table_end__   = .;
		
		___sinit__   = .;
	    STATICINIT

		__START_DATA = .;
		*(.data)
		.            = ALIGN (0x4);
		__END_DATA   = .;

		__START_SDATA = .;
		*(.sdata)
		.             = ALIGN (0x4);
		__END_SDATA   = .;

		__SDA_BASE = .;
		.          = ALIGN(0x4);
	} >> user

	.bss :
	{
		__START_SBSS = .;
		*(.sbss)
		*(SCOMMON)
		__END_SBSS   = .;

		__START_BSS  = .;
		*(.bss)
		*(COMMON)
		__END_BSS    = .;	
		. = ALIGN(0x4);
	} >> user

	___SRAM			= ADDR(.vectors);
	___SRAM_SIZE	= 0x00008000;

	___IPSBAR		= ADDR(.ipsbar);

	___SP_SIZE      = 0x800;

        HEAP_SIZE       = 0;                                             /* This can be left as zero if only uMalloc is used */
        ___HEAP_START	= .;
	___HEAP_END	= ___HEAP_START + HEAP_SIZE;
        ___SP_END	= ___HEAP_END;
   
	___heap_addr 	= ___HEAP_START;
	___heap_size 	= ___HEAP_END -  ___HEAP_START;
	___SP_INIT	= ___SRAM + ___SRAM_SIZE - 4;

    ___VECTOR_RAM   = ___SRAM;
	___DATA_END     = __END_DATA;
	___BSS_START    = __START_BSS;
	___BSS_END      = __END_BSS;
	___FLASH        = 0;
	___PC_INIT      = ___VECTOR_RAM + 0x418;		

	__S_romp        = 0x0;					    # no ROM in this example
}
