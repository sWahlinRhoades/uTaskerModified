<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\MJBC\Internal\Freescale\Kinetis\workspace\uTaskerBoot\Applications\uTaskerBoot\uVision_Kinetis\uTaskerBoot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\MJBC\Internal\Freescale\Kinetis\workspace\uTaskerBoot\Applications\uTaskerBoot\uVision_Kinetis\uTaskerBoot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 567]: Last Updated: Wed Jan 19 01:49:05 2011
<BR><P>
<H3>Maximum Stack Usage =        596 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fnApplication &rArr; fnDoLCD_text &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">_RealTimeInterrupt</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[d]">_port_A_isr</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[1]">entry_que</a> from driver.o(.text) referenced from driver.o(.text)
 <LI><a href="#[f]">fnApplication</a> from application.o(.text) referenced from kinetis.o(.constdata)
 <LI><a href="#[c]">fnFlashRoutine</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[11]">fnLCD</a> from glcd.o(.text) referenced from kinetis.o(.constdata)
 <LI><a href="#[10]">fnMassStorage</a> from mass_storage.o(.text) referenced from kinetis.o(.constdata)
 <LI><a href="#[e]">fnTaskWatchdog</a> from watchdog.o(.text) referenced from kinetis.o(.constdata)
 <LI><a href="#[7]">irq_NMI</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[9]">irq_SVCall</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[4]">irq_bus_fault</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[6]">irq_debug_monitor</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[a]">irq_default</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[2]">irq_hard_fault</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[3]">irq_memory_man</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[8]">irq_pend_sv</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[5]">irq_usage_fault</a> from kinetis.o(.text) referenced from kinetis.o(.text)
 <LI><a href="#[12]">main</a> from kinetis.o(.text) referenced from kinetis.o(RESET)
 <LI><a href="#[12]">main</a> from kinetis.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[13]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[7b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[31]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[80]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[32]"></a>fnNeedQueues</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fnNeedQueues &rArr; uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStart
</UL>

<P><STRONG><a name="[35]"></a>fnSearchID</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fnSearchID
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnAllocateQueue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteInternal
</UL>

<P><STRONG><a name="[34]"></a>fnAllocateQueue</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fnAllocateQueue &rArr; fnAllocateBuffer &rArr; uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMalloc
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSearchID
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnAllocateBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnOpen
</UL>

<P><STRONG><a name="[38]"></a>uMemcpy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_scroll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_rect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_pic
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetDefaultNetwork
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters_1
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetParameters
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetValidPars
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParameters
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileCloseMime
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFillBuf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetBuf
</UL>

<P><STRONG><a name="[37]"></a>fnGetBuf</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fnGetBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_que
</UL>

<P><STRONG><a name="[39]"></a>fnOpen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fnOpen &rArr; fnAllocateQueue &rArr; fnAllocateBuffer &rArr; uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnAllocateQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStart
</UL>

<P><STRONG><a name="[81]"></a>fnDriver</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>fnFillBuf</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteInternal
</UL>

<P><STRONG><a name="[3d]"></a>fnWrite</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_scroll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_rect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_pic
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_line
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerSchedule
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnPrint
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEventMessage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnInterruptMessage
</UL>

<P><STRONG><a name="[62]"></a>fnRead</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fnRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnMassStorage
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[82]"></a>fnMsgs</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>fnGetDataBlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>fnInterruptMessage</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
</UL>

<P><STRONG><a name="[3f]"></a>fnEventMessage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fnEventMessage &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[40]"></a>fnPrint</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugMsg
</UL>

<P><STRONG><a name="[41]"></a>fnDebugMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugHex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugDec
</UL>

<P><STRONG><a name="[43]"></a>fnBufferDec</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugDec
</UL>

<P><STRONG><a name="[42]"></a>fnDebugDec</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnBufferDec
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugMsg
</UL>

<P><STRONG><a name="[45]"></a>fnBufferHex</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugHex
</UL>

<P><STRONG><a name="[44]"></a>fnDebugHex</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnBufferHex
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDebugMsg
</UL>

<P><STRONG><a name="[84]"></a>fnHexStrHex</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>fnDecStrHex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>uMemset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uMemset
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMallocAlign
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMalloc
</UL>

<P><STRONG><a name="[74]"></a>uMemcmp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uMemcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
</UL>

<P><STRONG><a name="[86]"></a>uStrcmp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>uStrcpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uStrcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_text
</UL>

<P><STRONG><a name="[87]"></a>uStrlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>fnSetPar</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetParameters
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetValidPars
</UL>

<P><STRONG><a name="[47]"></a>fnGetPar</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ufile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fnGetPar &rArr; fnGetValidPars &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetValidPars
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetEthernetPars
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters_1
</UL>

<P><STRONG><a name="[48]"></a>fnDelPar</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ufile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fnDelPar &rArr; fnSetParameters &rArr; fnWriteBytesFlash &rArr; fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetParameters
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetValidPars
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[4d]"></a>fnConvertName</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenFile
</UL>

<P><STRONG><a name="[61]"></a>fnEnterUserFiles</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ufile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[49]"></a>uOpenUserFile</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uStrEquiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenFile
</UL>

<P><STRONG><a name="[4b]"></a>fnGetUserMimeType</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
</UL>

<P><STRONG><a name="[4c]"></a>uOpenFile</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenUserFile
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConvertName
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenManagedFile
</UL>

<P><STRONG><a name="[4e]"></a>uGetFileLength</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFilterUserFileLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenManagedFile
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenNextMimeFile
</UL>

<P><STRONG><a name="[50]"></a>uOpenNextMimeFile</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
</UL>

<P><STRONG><a name="[51]"></a>uFileErase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
</UL>

<P><STRONG><a name="[52]"></a>uFileWrite</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileErase
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenNextMimeFile
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fnWriteBytesFlash
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>

<P><STRONG><a name="[55]"></a>uGetFileData</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFilterUserFileLength
</UL>

<P><STRONG><a name="[56]"></a>uFileCloseMime</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fnWriteBytesFlash
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>

<P><STRONG><a name="[88]"></a>uGetFileName</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ufile.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>fnInitialiseHeap</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, umalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fnInitialiseHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>uMalloc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, umalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemset
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnAllocateQueue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnNeedQueues
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnAllocateBuffer
</UL>

<P><STRONG><a name="[57]"></a>uMallocAlign</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, umalloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemset
</UL>

<P><STRONG><a name="[89]"></a>fnStackFree</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, umalloc.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>fnHeapAvailable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, umalloc.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>fnHeapFree</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, umalloc.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>uTaskerStart</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uTaskerStart &rArr; fnOpen &rArr; fnAllocateQueue &rArr; fnAllocateBuffer &rArr; uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnStartTick
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnInitialiseRND
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMalloc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnOpen
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnNeedQueues
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>fnRandom</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utasker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnInitialiseRND
</UL>

<P><STRONG><a name="[59]"></a>uTaskerSchedule</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uTaskerSchedule &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>uTaskerStateChange</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uTaskerStateChange
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSmartUpdate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileManagedDelete
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnValidatedInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteInternal
</UL>

<P><STRONG><a name="[5a]"></a>uTaskerMonoTimer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uTaskerMonoTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnStartBlinkTimer
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[5b]"></a>uTaskerRemainingTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uTaskerRemainingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnStartBlinkTimer
</UL>

<P><STRONG><a name="[5c]"></a>uTaskerStopTimer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uTaskerStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWeHaveBeenValidated
</UL>

<P><STRONG><a name="[6d]"></a>fnRtmkSystemTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, utasker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fnRtmkSystemTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RealTimeInterrupt
</UL>

<P><STRONG><a name="[e]"></a>fnTaskWatchdog</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fnTaskWatchdog &rArr; fnRetriggerWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRetriggerWatchdog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>uStrEquiv</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ip_utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenUserFile
</UL>

<P><STRONG><a name="[5d]"></a>fnSetDefaultNetwork</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fnSetDefaultNetwork &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetEthernetPars
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters_1
</UL>

<P><STRONG><a name="[5f]"></a>fnGetOurParameters</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = fnGetOurParameters &rArr; fnGetOurParameters_1 &rArr; fnGetPar &rArr; fnGetValidPars &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters_1
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[f]"></a>fnApplication</STRONG> (Thumb, 972 bytes, Stack size 416 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = fnApplication &rArr; fnDoLCD_text &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnResetBoard
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_scroll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_rect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_pic
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnValidatedInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerMonoTimer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEnterUserFiles
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDelPar
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMalloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>fnGetEthernetPars</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetDefaultNetwork
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetPar
</UL>

<P><STRONG><a name="[8c]"></a>fnAreWeValidating</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>fnWeHaveBeenValidated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnValidatedInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStopTimer
</UL>

<P><STRONG><a name="[8d]"></a>fnSaveDebugHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>fnRestoreDebugHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>fnUserHWInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>fnConnectGPIO</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fnConnectGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEnterHandler
</UL>

<P><STRONG><a name="[12]"></a>main</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; uTaskerStart &rArr; fnOpen &rArr; fnAllocateQueue &rArr; fnAllocateBuffer &rArr; uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConnectGPIO
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_keil_ram_size
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LowLevelInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUserHWInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerSchedule
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnInitialiseHeap
</UL>

<P><STRONG><a name="[19]"></a>fnInitialiseRND</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fnInitialiseRND
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStart
</UL>

<P><STRONG><a name="[1a]"></a>uEnable_Interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLowPower
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashNow
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RealTimeInterrupt
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRetriggerWatchdog
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStopTimer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerRemainingTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerMonoTimer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerSchedule
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFillBuf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetBuf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteInternal
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_que
</UL>

<P><STRONG><a name="[1b]"></a>uDisable_Interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashNow
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RealTimeInterrupt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnResetBoard
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRetriggerWatchdog
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStopTimer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerRemainingTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerMonoTimer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerSchedule
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFillBuf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetBuf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteInternal
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_que
</UL>

<P><STRONG><a name="[1c]"></a>fnRetriggerWatchdog</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fnRetriggerWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnTaskWatchdog
</UL>

<P><STRONG><a name="[1d]"></a>fnStartTick</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStart
</UL>

<P><STRONG><a name="[1e]"></a>fnConfigSCI</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, kinetis.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fnConfigSCI
</UL>

<P><STRONG><a name="[1f]"></a>fnTxOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>fnTxOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[21]"></a>fnRxOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[22]"></a>fnRxOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[23]"></a>fnClearTxInt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[24]"></a>fnTxByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[25]"></a>fnGetMultiDropByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[26]"></a>fnEraseFlashSector</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fnEraseFlashSector &rArr; fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashNow
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileManagedDelete
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetParameters
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileErase
</UL>

<P><STRONG><a name="[27]"></a>fnWriteBytesFlash</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fnWriteBytesFlash &rArr; fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashNow
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetParameters
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileCloseMime
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fnWriteBytesFlash
</UL>

<P><STRONG><a name="[28]"></a>fnGetParsFile</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fnGetParsFile &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenNextMimeFile
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetUserMimeType
</UL>

<P><STRONG><a name="[29]"></a>fnGetValidPars</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fnGetValidPars &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDelPar
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetPar
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetPar
</UL>

<P><STRONG><a name="[2a]"></a>fnGetParameters</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fnGetParameters &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetPar
</UL>

<P><STRONG><a name="[2b]"></a>fnSetParameters</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fnSetParameters &rArr; fnWriteBytesFlash &rArr; fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDelPar
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetPar
</UL>

<P><STRONG><a name="[2c]"></a>fnConfigureInterrupt</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, kinetis.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fnConfigureInterrupt &rArr; fnEnterHandler &rArr; fnConnectGPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEnterHandler
</UL>

<P><STRONG><a name="[2d]"></a>fnDoLowPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
</UL>

<P><STRONG><a name="[2e]"></a>fnResetBoard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[6e]"></a>uFileManagedDelete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mass_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uFileManagedDelete &rArr; fnEraseFlashSector &rArr; fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenManagedFile
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnMassStorage
</UL>

<P><STRONG><a name="[6f]"></a>uOpenManagedFile</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, mass_storage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileManagedDelete
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenFile
</UL>

<P><STRONG><a name="[10]"></a>fnMassStorage</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mass_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fnMassStorage &rArr; uFileManagedDelete &rArr; fnEraseFlashSector &rArr; fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileManagedDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>fnDoLCD_line</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = fnDoLCD_line &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[64]"></a>fnDoLCD_rect</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = fnDoLCD_rect &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[11]"></a>fnLCD</STRONG> (Thumb, 1114 bytes, Stack size 112 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = fnLCD &rArr; fnWriteScroll &rArr; fnConfigureBlink &rArr; fnDoLCD_rect &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteTextBuffer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBitMap
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteLine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteRect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteScroll
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSmartUpdate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetWindow
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerMonoTimer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemset
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEventMessage
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>fnDoLCD_text</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = fnDoLCD_text &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uStrcpy
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[63]"></a>fnDoLCD_pic</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = fnDoLCD_pic &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[66]"></a>fnDoLCD_scroll</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fnDoLCD_scroll &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>entry_que</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = entry_que &rArr; fnGetBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>fnWriteInternal</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFillBuf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSearchID
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWrite
</UL>

<P><STRONG><a name="[36]"></a>fnAllocateBuffer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fnAllocateBuffer &rArr; uMalloc &rArr; uMemset
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnAllocateQueue
</UL>

<P><STRONG><a name="[54]"></a>_fnWriteBytesFlash</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileCloseMime
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
</UL>

<P><STRONG><a name="[4f]"></a>fnFilterUserFileLength</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ufile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
</UL>

<P><STRONG><a name="[5e]"></a>fnGetOurParameters_1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fnGetOurParameters_1 &rArr; fnGetPar &rArr; fnGetValidPars &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetDefaultNetwork
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetPar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetOurParameters
</UL>

<P><STRONG><a name="[60]"></a>fnValidatedInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fnValidatedInit &rArr; uTaskerStateChange
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWeHaveBeenValidated
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnApplication
</UL>

<P><STRONG><a name="[a]"></a>irq_default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>irq_SVCall</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>irq_pend_sv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>irq_NMI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>irq_debug_monitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>irq_usage_fault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>irq_bus_fault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>irq_memory_man</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>irq_hard_fault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>_LowLevelInit</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>_RealTimeInterrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _RealTimeInterrupt &rArr; fnRtmkSystemTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnRtmkSystemTick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>fnFlashRoutine</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>fnFlashNow</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fnFlashNow
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uEnable_Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDisable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
</UL>

<P><STRONG><a name="[d]"></a>_port_A_isr</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, kinetis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _port_A_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinetis.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>fnEnterHandler</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, kinetis.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fnEnterHandler &rArr; fnConnectGPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConnectGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureInterrupt
</UL>

<P><STRONG><a name="[17]"></a>_keil_ram_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kinetis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>fnSetWindow</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fnSetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSmartUpdate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[70]"></a>fnSmartUpdate</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fnSmartUpdate &rArr; uTaskerStateChange
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSetWindow
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteLine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteRect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteScroll
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[72]"></a>fnStartBlinkTimer</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fnStartBlinkTimer &rArr; uTaskerMonoTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerRemainingTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerMonoTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
</UL>

<P><STRONG><a name="[73]"></a>fnConfigureBlink</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = fnConfigureBlink &rArr; fnDoLCD_rect &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnStartBlinkTimer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_rect
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDoLCD_line
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerStopTimer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uTaskerRemainingTime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcmp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteScroll
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[75]"></a>fnWriteScroll</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = fnWriteScroll &rArr; fnConfigureBlink &rArr; fnDoLCD_rect &rArr; fnWrite &rArr; fnWriteInternal &rArr; fnFillBuf &rArr; uMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConfigureBlink
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSmartUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[76]"></a>fnWriteRect</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fnWriteRect &rArr; fnSmartUpdate &rArr; uTaskerStateChange
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSmartUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[77]"></a>fnWriteLine</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fnWriteLine &rArr; fnSmartUpdate &rArr; uTaskerStateChange
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSmartUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[79]"></a>fnWriteBitMap</STRONG> (Thumb, 400 bytes, Stack size 104 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fnWriteBitMap
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteTextBuffer
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>

<P><STRONG><a name="[78]"></a>fnWriteTextBuffer</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fnWriteTextBuffer &rArr; fnWriteBitMap
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBitMap
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnLCD
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
